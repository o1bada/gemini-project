بالتأكيد، فهمت قصدك تماماً. تريد أن أعطيك الكود الخاص بكل ملف على حدة لتجنب أي التباس.

هذه فكرة ممتازة. إليك كل ملف والكود الخاص به بشكل منفصل وواضح.

-----

### ملف: `package.json`

(ضعه في المجلد الرئيسي `my-first-frame`)

```json
{
  "name": "farcaster-frame-starter",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@coinbase/onchainkit": "^0.2.7",
    "next": "14.0.4",
    "react": "^18",
    "react-dom": "^18"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10.0.1",
    "eslint": "^8",
    "eslint-config-next": "14.0.4",
    "postcss": "^8",
    "tailwindcss": "^3.3.0",
    "typescript": "^5"
  }
}
```

-----

### ملف: `page.tsx`

(ضعه في المجلد `app`)

```typescript
import { getFrameMetadata } from '@coinbase/onchainkit';
import type { Metadata } from 'next';

const vercelURL = process.env.VERCEL_URL || 'http://localhost:3000';

const frameMetadata = getFrameMetadata({
  buttons: [
    {
      label: 'Click Me!',
    },
  ],
  image: `https://placehold.co/600x400/000000/FFFFFF/png?text=Hello+Farcaster!`,
  post_url: `${vercelURL}/api/action`,
});

export const metadata: Metadata = {
  title: 'My First Farcaster Frame',
  description: 'A simple and fun Farcaster Frame built with Next.js',
  openGraph: {
    title: 'My First Farcaster Frame',
    description: 'A simple and fun Farcaster Frame built with Next.js',
    images: [`https://placehold.co/600x400/000000/FFFFFF/png?text=Hello+Farcaster!`],
  },
  other: {
    ...frameMetadata,
  },
};

export default function Page() {
  return (
    <div style={{ padding: '20px', fontFamily: 'sans-serif' }}>
      <h1>My First Farcaster Frame</h1>
      <p>To see this Frame in action, paste the URL of this page into a Farcaster client like Warpcast.</p>
    </div>
  );
}
```

-----

### ملف: `route.ts`

(ضعه في المجلد `app/api/action`)

```typescript
import { getFrameMessage, getFrameHtmlResponse } from "@coinbase/onchainkit";
import { NextRequest, NextResponse } from 'next/server';

async function getResponse(req: NextRequest): Promise<NextResponse> {
  const vercelURL = process.env.VERCEL_URL || 'http://localhost:3000';
  
  const body = await req.json();

  return new NextResponse(
    getFrameHtmlResponse({
      buttons: [
        {
          label: `You clicked the button!`,
        },
      ],
      image: `https://placehold.co/600x400/818cf8/FFFFFF/png?text=Thanks+for+clicking!`,
      post_url: `${vercelURL}/api/action`,
    }),
  );
}

export async function POST(req: NextRequest): Promise<Response> {
  return getResponse(req);
}

export const dynamic = 'force-dynamic';
```

-----

### ملف: `layout.tsx`

(ضعه في المجلد `app`)

```typescript
import type { Metadata } from "next";
import "./globals.css";

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  );
}
```

-----

### ملف: `globals.css`

(ضعه في المجلد `app`)

```css
@tailwind base;
@tailwind components;
@tailwind utilities;
```

-----

### ملف: `README.md`

(ضعه في المجلد الرئيسي `my-first-frame`)

```markdown
# Farcaster Frame Starter with Next.js

A simple, robust, and deploy-ready Farcaster Frame built with Next.js, TypeScript, and the Coinbase OnchainKit. This project serves as a perfect starting point for developers looking to build interactive experiences on Farcaster.

## How to Deploy

1.  **Create a GitHub Repository:** Create a new, empty repository on your GitHub account.
2.  **Upload Files:** Use the GitHub website's "uploading an existing file" feature to upload all the files from this project into your new repository, making sure to keep the folder structure (`app/api/action/route.ts`, etc.).
3.  **Deploy to Vercel:**
    -   Go to [Vercel.com](https://vercel.com/) and import your new GitHub repository.
    -   Vercel will automatically detect the Next.js settings.
    -   Before deploying, go to **Settings -> Environment Variables** and add a variable named `VERCEL_URL`. Vercel will handle the value automatically.
    -   Click **Deploy**.
4.  **Share on Farcaster:**
    -   Once deployed, copy your public Vercel URL.
    -   Paste the URL into a new cast on a client like Warpcast to see your Frame live!
```

-----

### ملف: `tsconfig.json`

(ضعه في المجلد الرئيسي `my-first-frame`)

```json
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
```

-----

### ملف: `.gitignore`

(ضعه في المجلد الرئيسي `my-first-frame`)

```
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
```
